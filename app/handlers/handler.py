from app import dp, bot
from app.settings import PAY_TOKEN
from app.database.db_communicate import *


# Callback handlers

from .callback_handler import *

###
from ..database.add_skin_and_box import add_list_of_skins


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not is_user_in_bd_by(message.chat.id):
        add_user(message.chat.id, message.chat.username)
        add_money_to_user_by(message.chat.id, 24)
    await bot.send_message(message.chat.id, '–ü—Ä–∏–≤—ñ—ÇüòÉ\n–û–±–µ—Ä–∏ –¥—ñ—ó –∑ –º–µ–Ω—é', reply_markup=inline_keyboard.menu_keyboard)


@dp.message_handler(commands=['add_trade_url'])
async def trade_url(message: types.Message):
    change_user_last_message(message.chat.id, 'trade_url')
    await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å—é–¥–∏ —Å–≤–æ—é Trade —Å–∏–ª–∫—É')


@dp.message_handler(commands=['order_box'])
async def order_box(message: types.Message):
    await bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ —Ç–∏–ø –∫–µ–π—Å—É, —è–∫–∏–π —Ö–æ—á–µ—à –≤—ñ–¥–∫—Ä–∏—Ç–∏!',
                           reply_markup=inline_keyboard.all_boxes)


@dp.message_handler(commands=['balance'])
async def balance(message: types.Message):
    await bot.send_message(message.chat.id, f'üíµ –í–∞—à –±–∞–ª–∞–Ω—Å {show_balance_by_(message.chat.id)} –≥—Ä–Ω',
                           reply_markup=inline_keyboard.paying_keyboard)


@dp.message_handler(commands=['skins'])
async def balance(message: types.Message):
    skins_keyboard = InlineKeyboardMarkup(row_width=1)
    for skin_name in show_all_user_skins_by(message.chat.id):
        skin = session.query(Skin).where(Skin.name == skin_name).first()
        skin_btn = InlineKeyboardButton(f'‚úÖ{skin.name}', callback_data=f'{skin.id}')
        skins_keyboard.add(skin_btn)
    inventory_back_btn = InlineKeyboardButton('‚¨Ö –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data='type_of_box_back')
    inventory_sell_all_btn = InlineKeyboardButton('üí∞ –ü—Ä–æ–¥–∞—Ç–∏ –≤—Å—ñ —Å–∫—ñ–Ω–∏', callback_data='sell_all')
    skins_keyboard.add(inventory_sell_all_btn, inventory_back_btn)
    await bot.send_message(message.chat.id, f'üì≠ –í–∞—à —ñ–Ω–≤–µ—Ä—Ç–∞—Ä',
                           reply_markup=skins_keyboard)


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
    if message.chat.id == ADMIN_ID:
        await bot.send_message(message.chat.id, '–î–æ–±—Ä–∏–π –¥–µ–Ω—å\n–û—Å—å –ø–∞–Ω–µ–ª—å –¥–ª—è –ê–¥–º—ñ–Ω–∞',
                               reply_markup=inline_keyboard.admin_menu_keyboard)


@dp.message_handler(commands=['add_easy_money'])
async def balance(message: types.Message):
    add_money_to_user_by(message.chat.id, 12)


@dp.message_handler(content_types=types.ContentTypes.SUCCESSFUL_PAYMENT)
async def successful_pay(message: types.Message):
    if type(show_user_last_message_by(message.chat.id)) == int():
        add_money_to_user_by(message.chat.id, show_user_last_message_by(message.chat.id))
        await message.answer(f'Successful: {message.successful_payment.order_info}')
        await bot.send_message(message.chat.id, '–û–±–µ—Ä–∏ –¥—ñ—ó –∑ –º–µ–Ω—é',
                               reply_markup=inline_keyboard.menu_keyboard)
    await message.answer('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫(')


@dp.message_handler()
async def message_handler(message: types.Message):
    if show_user_last_message_by(message.chat.id) == 'paying':
        change_user_last_message(message.chat.id, '')
        try:
            print(int(message.text))
        except ValueError:
            await bot.send_message(message.chat.id, '–í–∏ —â–æ—Å—å –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É')
            change_user_last_message(message.chat.id, 'paying')
            return None
        sum_ = int(message.text)
        if sum_ >= 40:
            await bot.send_invoice(message.chat.id,
                                   '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É',
                                   '–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É',
                                   'invoice',
                                   PAY_TOKEN,
                                   'UAH',
                                   [types.LabeledPrice('–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É', sum_ * 100)]
                                   )
            change_user_last_message(message.chat.id, sum_)
            return None
        else:
            await bot.send_message(message.chat.id, "–ú–æ–∂–Ω–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º –Ω–∞ 40 –≥—Ä–Ω!\n–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
            change_user_last_message(message.chat.id, 'paying')
            return None
    elif show_user_last_message_by(message.chat.id) == 'trade_url':
        res = create_steam_href_by(message.chat.id, message.text)
        await bot.send_message(message.chat.id, res)
        change_user_last_message(message.chat.id, '')
    elif show_user_last_message_by(message.chat.id) == 'add_box':
        box_data = message.text.split('@')
        try:
            add_list_of_skins(box_data[3], box_data[0], box_data[1], box_data[2])
            await bot.send_message(message.chat.id, f'‚úÖ –ö–µ–π—Å –¥–æ–¥–∞–Ω–æ! ‚úÖ\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å \n–∫–µ–π—Å—É –≤ —Å–ø–∏—Å–∫—É',
                                   reply_markup=inline_keyboard.admin_menu_keyboard)
        except Exception as err:
            await bot.send_message(message.chat.id, f'‚ùå –©–æ—Å—å —Å—Ç–∞–ª–æ—Å—è –Ω–µ —Ç–∞–∫, –∞–±–æ –≤–∏ –≤–≤–µ–ª–∏ –¥–∞–Ω—ñ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n{err}',
                                   reply_markup=inline_keyboard.admin_menu_keyboard)
    change_user_last_message(message.chat.id, '')

# All handlers of this app
